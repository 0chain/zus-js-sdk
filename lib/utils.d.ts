export namespace Endpoints {
    const REGISTER_CLIENT: string;
    const PUT_TRANSACTION: string;
    const GET_RECENT_FINALIZED: string;
    const GET_LATEST_FINALIZED: string;
    const GET_CHAIN_STATS: string;
    const GET_BLOCK_INFO: string;
    const CHECK_TRANSACTION_STATUS: string;
    const GET_BALANCE: string;
    const GET_CLIENT: string;
    const GET_SCSTATE: string;
    const SC_REST: string;
    const SC_REST_ALLOCATION: string;
    const SC_REST_ALLOCATIONS: string;
    const SC_REST_READPOOL_STATS: string;
    const SC_REST_WRITEPOOL_STATS: string;
    const SC_BLOBBER_STATS: string;
    const SC_SHARDER_LIST: string;
    const SC_MINERS_STATS: string;
    const SC_REST_ALLOCATION_MIN_LOCK: string;
    const GET_LOCKED_TOKENS: string;
    const GET_USER_POOLS: string;
    const GET_STORAGESC_POOL_STATS: string;
    const GET_MINERSC_POOL_STATS: string;
    const GET_STAKE_POOL_STAT: string;
    const ALLOCATION_FILE_LIST: string;
    const FILE_STATS_ENDPOINT: string;
    const OBJECT_TREE_ENDPOINT: string;
    const FILE_META_ENDPOINT: string;
    const RENAME_ENDPOINT: string;
    const COPY_ENDPOINT: string;
    const UPLOAD_ENDPOINT: string;
    const COMMIT_ENDPOINT: string;
    const COMMIT_META_TXN_ENDPOINT: string;
    const PROXY_SERVER_DOWNLOAD_ENDPOINT: string;
    const ZEROBOX_SERVER_GET_MNEMONIC_ENDPOINT: string;
    const ZEROBOX_SERVER_SHARE_INFO_ENDPOINT: string;
    const ZEROBOX_SERVER_SAVE_MNEMONIC_ENDPOINT: string;
    const ZEROBOX_SERVER_DELETE_MNEMONIC_ENDPOINT: string;
    const ZEROBOX_SERVER_REFERRALS_INFO_ENDPOINT: string;
    const ZEROBOX_SERVER_FREE_ALLOCATION: string;
    const ZEROBOX_SERVER_DELETE_EXIST_ALLOCATION: string;
}
export namespace zcnContracts {
    const faucetSCAddress: string;
    const storageSCAddress: string;
    const minerSCAddress: string;
    const interestPoolSCAddress: string;
    const dexMintAddress: string;
}
export namespace smartContractType {
    import sharders = zcnContracts.storageSCAddress;
    export { sharders };
    import miners = zcnContracts.minerSCAddress;
    export { miners };
}
export function getConsensusedInformationFromSharders(sharders: any[], url: string, params: Object, parser: Function): Promise<any>;
export function byteToHexString(uint8arr: Uint8Array): string;
export function hexStringToByte(str: string): Uint8Array;
export function shuffleArray(array: any[]): any[];
export function sleep(ms: number): Promise<any>;
export function toHex(str: string): string;
export function computeStoragePartDataId(allocationId: string, path: string, fileName: string, partNum: number): string;
export function parseAuthTicket(authTicket: string): Object;
export function parseWalletInfo(ae: object): object;
export function postReq(url: string, data: object, option: object): Promise<any>;
export function putReq(url: string, data: object): Promise<any>;
export function delReq(url: string, data: object): Promise<any>;
export function recoverWalletFromCloud(url: string, AppIDToken: string, AppPhoneNumber: string): Promise<any>;
export function getShareInfo(url: string, clientSignature: string, clientId: string, clientkey: string): Promise<any>;
export function getReferrals(url: string): Promise<any>;
export function postMethodTo0box(url: string, data: object, clientId: string, publicKey: string, clientSignature: string, idToken: string): Promise<any>;
export function deleteMethodTo0box(url: string, data: object, clientId: string, publicKey: string, clientSignature: string, idToken: string): Promise<any>;
export function postReqToBlobber(url: string, data: object, params: object, clientId: string, publicKey: string, signature: string): Promise<any>;
export function getReqBlobbers(url: string, params: object, clientId: string): Promise<any>;
export function getReq(url: string, params: object): Promise<any>;
export function getDownloadReq(url: string, params: object): Promise<any>;
export function plainGet(url: string): Promise<any>;
export function getReqFromMiner(url: string, params: object): Promise<any>;
export function parseJson(jsonString: string): object;
export function doParallelPostReqToAllMiners(miners: string[], url: string, postData: object): Promise<any>;
export function readBytes(file: File): Promise<Uint8Array>;
export function doGetReqToRandomMiner(miners: string[], url: string, getData: object): Promise<any>;
export function getBalanceUtil(clientId: string, domain: any): Promise<any>;
export function getTransactionResponse(data: Object): Object;
export function submitTransaction(ae: Object, toClientId: string, val: number, note: string, transactionType: string, domain: any): Promise<any>;
export function getMinersAndShardersUtils(domain: string): Promise<any>;
